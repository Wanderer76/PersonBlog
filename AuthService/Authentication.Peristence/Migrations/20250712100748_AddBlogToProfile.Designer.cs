// <auto-generated />
using System;
using Authentication.Peristence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Authentication.Peristence.Migrations
{
    [DbContext(typeof(AuthenticationDbContext))]
    [Migration("20250712100748_AddBlogToProfile")]
    partial class AddBlogToProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Authentication")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authentication.Domain.Entities.AppProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("ProfileState")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsDeleted")
                        .IsUnique();

                    b.ToTable("Profiles", "Authentication");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d1e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 12, 10, 7, 48, 381, DateTimeKind.Unspecified).AddTicks(86), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "ateplinsky@mail.ru",
                            FirstName = "Артём",
                            IsDeleted = false,
                            ProfileState = 0,
                            SurName = "Теплинский",
                            UserId = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d1e")
                        });
                });

            modelBuilder.Entity("Authentication.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastAuthenticate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", "Authentication");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d1e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 12, 10, 7, 48, 380, DateTimeKind.Unspecified).AddTicks(7476), new TimeSpan(0, 0, 0, 0, 0)),
                            LastAuthenticate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Login = "admin",
                            Password = "0ch1Fr5Rpq0=;lmdHoYpYQ4UtVmtKianfS/aeLUIlv5cJFrqHdwdcS7U="
                        });
                });

            modelBuilder.Entity("Authentication.Domain.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("AppUserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("AppUserRoles", "Authentication");

                    b.HasData(
                        new
                        {
                            AppUserId = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d1e"),
                            UserRoleId = new Guid("accbc12f-6ff1-4343-a26f-13b99e64abb6")
                        });
                });

            modelBuilder.Entity("Authentication.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Tokens", "Authentication");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", "Authentication");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57a2b99b-b6ee-4c98-a1f0-b18fe96dae60"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("accbc12f-6ff1-4343-a26f-13b99e64abb6"),
                            Name = "superadmin"
                        },
                        new
                        {
                            Id = new Guid("d95ca3d6-0f63-4b48-a54f-1202f3d6bf2c"),
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("c2ff298c-dd14-436c-a28b-e2036866ef41"),
                            Name = "bloger"
                        });
                });

            modelBuilder.Entity("Authentication.Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("Authentication.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Domain.Entities.UserRole", "UserRole")
                        .WithMany("AppUserRole")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.Token", b =>
                {
                    b.HasOne("Authentication.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("Authentication.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("AppUserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
