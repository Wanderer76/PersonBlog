// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Profile.Persistence;

#nullable disable

namespace Profile.Persistence.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    [Migration("20250131075703_UpdateVideoModelAndEvent")]
    partial class UpdateVideoModelAndEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Profile")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Profile.Domain.Entities.AppProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("ProfileState")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsDeleted")
                        .IsUnique();

                    b.ToTable("Profiles", "Profile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d2e"),
                            Email = "ateplinsky@mail.ru",
                            FirstName = "Артём",
                            IsDeleted = false,
                            ProfileState = 0,
                            SurName = "Теплинский",
                            UserId = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d1e")
                        });
                });

            modelBuilder.Entity("Profile.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Blogs", "Profile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d3e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 31, 7, 57, 3, 129, DateTimeKind.Unspecified).AddTicks(6652), new TimeSpan(0, 0, 0, 0, 0)),
                            ProfileId = new Guid("09f3c24e-6e70-48ea-a5c5-60727af95d2e"),
                            Title = "Тест"
                        });
                });

            modelBuilder.Entity("Profile.Domain.Entities.CombineFileChunksEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VideoMetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CombineFileChunksEvents", "Profile");
                });

            modelBuilder.Entity("Profile.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("PreviewId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts", "Profile");
                });

            modelBuilder.Entity("Profile.Domain.Entities.Subscriptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("SubscriptionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SubscriptionStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ProfileId", "BlogId")
                        .IsUnique();

                    b.ToTable("Subscriptions", "Profile");
                });

            modelBuilder.Entity("Profile.Domain.Entities.VideoMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("Resolution")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.HasIndex("PostId", "Resolution", "ContentType")
                        .IsUnique();

                    b.ToTable("VideoMetadata", "Profile");
                });

            modelBuilder.Entity("Profile.Domain.Entities.VideoUploadEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VideoUploadEvents", "Profile");
                });

            modelBuilder.Entity("Profile.Domain.Entities.Blog", b =>
                {
                    b.HasOne("Profile.Domain.Entities.AppProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Profile.Domain.Entities.Post", b =>
                {
                    b.HasOne("Profile.Domain.Entities.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Profile.Domain.Entities.Subscriptions", b =>
                {
                    b.HasOne("Profile.Domain.Entities.Blog", "Blog")
                        .WithMany("Subscriptions")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile.Domain.Entities.AppProfile", "Profile")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Profile.Domain.Entities.VideoMetadata", b =>
                {
                    b.HasOne("Profile.Domain.Entities.Post", "Post")
                        .WithOne("VideoFile")
                        .HasForeignKey("Profile.Domain.Entities.VideoMetadata", "PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Profile.Domain.Entities.AppProfile", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Profile.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Profile.Domain.Entities.Post", b =>
                {
                    b.Navigation("VideoFile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
